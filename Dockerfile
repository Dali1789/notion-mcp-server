# Generated by https://smithery.ai. See: https://smithery.ai/docs/build/project-config
# Use Node.js LTS as the base image
FROM node:18-alpine AS builder

# Set working directory
WORKDIR /app

# Copy package.json and package-lock.json
COPY package*.json ./

# Install dependencies
RUN npm ci --ignore-scripts --omit-dev

# Copy source code
COPY . .

# Build the package
RUN npm run build

# Install package globally
RUN npm link

# Minimal image for runtime
FROM node:18-alpine

# Create app directory and install express
WORKDIR /app
RUN npm init -y && npm install express

# Copy built package from builder stage
COPY scripts/notion-openapi.json /usr/local/scripts/
COPY --from=builder /usr/local/lib/node_modules/@notionhq/notion-mcp-server /usr/local/lib/node_modules/@notionhq/notion-mcp-server
COPY --from=builder /usr/local/bin/notion-mcp-server /usr/local/bin/notion-mcp-server

# Set default environment variables
ENV OPENAPI_MCP_HEADERS="{}"

# Set HTTP server
EXPOSE 3000
CMD ["node", "-e", "const express = require('express'); const { spawn } = require('child_process'); const app = express(); app.use(express.json()); app.get('/', (req, res) => res.json({status: 'ok', service: 'notion-mcp'})); app.post('/mcp', async (req, res) => { console.log('MCP request received:', req.body); try { console.log('Listing files...'); const mcpProcess = spawn('ls', ['-la', '/usr/local/bin/notion-mcp*'], { stdio: ['pipe', 'pipe', 'pipe'] }); mcpProcess.on('error', (err) => { console.error('Spawn error:', err); res.status(500).json({ error: 'Spawn failed: ' + err.message }); }); mcpProcess.stdin.end(); let output = ''; let errorOutput = ''; mcpProcess.stdout.on('data', (data) => { console.log('File listing:', data.toString()); output += data.toString(); }); mcpProcess.stderr.on('data', (data) => { console.log('Listing stderr:', data.toString()); errorOutput += data.toString(); }); mcpProcess.on('close', (code) => { console.log('Listing process closed with code:', code); console.log('File output:', output); res.json({ files: output, error: errorOutput }); }); } catch (error) { console.error('Catch error:', error); res.status(500).json({ error: error.message }); } }); app.listen(3000, () => console.log('HTTP server running on port 3000'));"]
